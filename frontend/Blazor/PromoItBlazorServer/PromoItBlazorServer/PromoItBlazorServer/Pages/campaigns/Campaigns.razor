@page "/campaigns"
@using PromoItBlazorServer.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<Campaigns> Logger


<PageTitle>Campaigns</PageTitle>

<h1>All campaigns</h1>

<table class="table table-hover table-striped">
    <thead class="thead-style">
        <tr>
            <th>Name</th>
            <th>Hashtag</th>
            <th>Description</th>
            <th>Company</th>
            <th>Date of create</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var campaign in campaigns.AsEnumerable().Reverse())
        {
                    <tr>
                        <td>@campaign.CampaignName</td>
                        <td>@campaign.Hashtag</td>
                        <td>@campaign.Description</td>
                        <td>@campaign.CompanyName</td>
                        <td>@campaign.CreateDate.ToShortDateString()</td>
                        <td><button class="btn" style="background-color: #5f6b3b; color: white" @onclick="() => NavigateToCampaign(campaign.CampaignId)">View more</button></td>
                    </tr>
        }
    </tbody>
</table>

@code {
    private string ErrorMessage { get; set; }

    private List<CampaignDto> campaigns = new List<CampaignDto>();
    private RequestsUrls requestsUrls = new RequestsUrls();

    public void NavigateToCampaign(int campaignId)
    {
        NavigationManager.NavigateTo($"/campaign/{campaignId}");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Getting all campaigns");

            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            HttpClient http = new HttpClient();

            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            campaigns = await http.GetFromJsonAsync<List<CampaignDto>>(requestsUrls.Campaigns);
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
            Logger.LogError(ErrorMessage);
        }
    }
}
