@page "/add-campaign"
@attribute [Authorize]
@using System.Net.Http;
@using System.Net.Http.Json;
@using PromoItBlazorServer.Data;
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor

<div style="margin-left:50px">
<h1>Add new campaign to make the world better!</h1>
<img class="promo-img" height=350px src="https://d3mvlb3hz2g78.cloudfront.net/wp-content/uploads/2020/11/thumb_720_450_dreamstime_m_44810592_(1).jpg"/>
</div>

<div class="card text-center donation-card">
<form method="post" @onsubmit="@SubmitForm">
    <div class="form-group">
        <label for="campaign">Name of campaign</label>
        <input type="text" class="form-control" placeholder="Campaign name" id="campaign" @bind="@campaign.CampaignName" required />
    </div>
    <div class="form-group">
        <label for="hashtag">Hashtag</label>
        <input type="hashtag" class="form-control" placeholder="Hashtag" id="hashtag" @bind="@campaign.Hashtag" required />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <input type="description" class="form-control" placeholder="Description" id="description" @bind="@campaign.Description" required />
    </div>
    <button type="submit" class="btn btn-success">Create</button>
</form>
</div>
@if (ErrorMessage != null)
{
            <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string ErrorMessage { get; set; }

    private CampaignDto campaign = new CampaignDto();
    private RequestsUrls requestsUrls = new RequestsUrls();


    private async Task SubmitForm()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            HttpClient http = new HttpClient();
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);


            HttpResponseMessage response = await http.PostAsJsonAsync(requestsUrls.Campaigns, campaign);
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();

                NavigationManager.NavigateTo("/campaigns");
            }
            else
            {
                object error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
                await JSRuntime.InvokeAsync<object>("alert", error);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
