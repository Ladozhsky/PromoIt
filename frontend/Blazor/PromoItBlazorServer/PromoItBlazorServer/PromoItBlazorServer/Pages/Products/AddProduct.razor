@page "/add-product"
@attribute [Authorize]
@using System.Net.Http;
@using System.Net.Http.Json;
@using PromoItBlazorServer.Data;
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor


<h1>Add new product that you can give to charity!</h1>

<img src="https://webpulse.imgsmail.ru/imgpreview?mb=webpulse&key=pulse_cabinet-image-aabae32a-0b86-4e43-b0d2-4acd32e79156" width="700px"/>

<form method="post" @onsubmit="@SubmitForm">
    <div class="form-group">
        <label for="product">Name of product</label>
        <input type="text" class="form-control" id="product" @bind="@product.ProductName" required />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <input type="text" class="form-control" id="price" @bind="@product.Price" required />
    </div>
    <div class="form-group">
        <label for="image">Insert url of the image</label>
        <input type="text" class="form-control" id="image" @bind="@product.Image" required />
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
</form>

@if (ErrorMessage != null)
{
                <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string ErrorMessage { get; set; }

    ProductDto product = new ProductDto();

    private async Task SubmitForm()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response = await client.PostAsJsonAsync("https://localhost:7096/api/Products", product);
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();

                NavigationManager.NavigateTo("/my-products");
            }
            else
            {
                object error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
                await JSRuntime.InvokeAsync<object>("alert", error);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
