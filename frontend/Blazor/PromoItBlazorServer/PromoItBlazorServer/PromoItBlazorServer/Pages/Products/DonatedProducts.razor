@page "/donated-products"
@attribute [Authorize]
@using PromoItBlazorServer.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<DonatedProducts> Logger


<PageTitle>Donated products</PageTitle>

<h1>My donated products</h1>

<table class="table table-hover table-striped">
    <thead class="thead-style">
        <tr>
            <th>Product</th>
            <th>Campaign</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in donatedProducts)
        {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@product.CampaignName</td>
                            <td>@product.Amount</td>
                        </tr>
        }
    </tbody>
</table>

@code {
    private string ErrorMessage { get; set; }

    private List<DonatedProductList> donatedProducts = new List<DonatedProductList>();
    private RequestsUrls requestsUrls = new RequestsUrls();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            HttpClient http = new HttpClient();

            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            Logger.LogInformation("Getting donated products...");
            donatedProducts = await http.GetFromJsonAsync<List<DonatedProductList>>(requestsUrls.DonatedProducts);
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
            Logger.LogError(ErrorMessage);
        }
    }
}

