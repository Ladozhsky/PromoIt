@page "/"
@using System.Net.Http.Headers;
@inject AuthenticationStateProvider AuthState
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager


<PageTitle>PromoIt</PageTitle>

<AuthorizeView>
<Authorized>
    <h1>Welcome, @Username!</h1>
</Authorized>
<NotAuthorized>
    <h1>Your should authorize to use the system</h1>
</NotAuthorized>
</AuthorizeView>
<br />
<br />

<div class="home-page">
<p>Our platform allows you to help people around the world.
   Caring people from different areas gather on our platform.
   <br/>
   <div class="to-center">
    <img class="promo-img" src="https://bf-annamariya.ru/uploads/posts/2020-02/1582079765_la-generosite-des-francais-continue-de-progresser-min.jpg" height=180px/>
   </div>
    <ul>
    <li>Business representatives can help those in need with their products, while making a good name for their company and getting additional advertising.</li>

    <li>Charities can tell the whole world about a difficult situation and get people's attention.</li>
    <div class="to-center">
   <p class="tweet-p">1 tweet&nbsp</p><p class="equal"> =&nbsp</p><p class="dollar-p">1 dollar</p>
   </div>
    <li>Social activists shares with #hashtag in Twitter, donating businesses and buy products for those in need with virtual dollars.</li>
    </ul>

    <h1 align="center">Together we'll make world better</h1>
</p>
</div>

@code {
    private string Username = "Anonymous User";
    private string Picture = "";

    private async Task UserExists()
    {
        string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];
        HttpClient http = new HttpClient();
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        bool userExists = await http.GetFromJsonAsync<bool>("https://localhost:7096/api/Users");
        if (!userExists)
        {
            NavigationManager.NavigateTo("/register");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();

        UserExists();

        Username = state.User.Identity.Name ?? string.Empty;

        Picture = state.User.Claims
                    .Where(c => c.Type.Equals("picture"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

        await base.OnInitializedAsync();
    }
}
