@page "/completed-transactions"
@attribute [Authorize(Policy = "AdminOnly")]
@using PromoItBlazorServer.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<UsersCompletedTransactions> Logger

<PageTitle>Completed transactions</PageTitle>

<h1>Completed transactions</h1>

<table class="table table-hover table-striped">
    <thead class="thead-style">
        <tr>
            <th>Username</th>
            <th>Address</th>
            <th>Tel Number</th>
            <th>Campaign</th>
            <th>Company</th>
            <th>Product</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var completedTransaction in completedTransactions.AsEnumerable().Reverse())
        {
                            <tr>
                                    <td>@completedTransaction.UserName</td>
                                    <td>@completedTransaction.Address</td>
                                    <td>@completedTransaction.TelNumber</td>
                                    <td>@completedTransaction.CampaignName</td>
                                    <td>@completedTransaction.CompanyName</td>
                                    <td>@completedTransaction.ProductName</td>
                                    <td>@completedTransaction.Amount</td>
                           </tr>
        }
    </tbody>
</table>

@code {
    private string ErrorMessage { get; set; }

    HttpClient http = new HttpClient();

    private List<CompleteTransactionsForAdmin> completedTransactions = new List<CompleteTransactionsForAdmin>();
    private RequestsUrls requestsUrls = new RequestsUrls();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            Logger.LogInformation("Getting transactions...");
            completedTransactions = await http.GetFromJsonAsync<List<CompleteTransactionsForAdmin>>(requestsUrls.Transactions);
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
            Logger.LogError(ErrorMessage);
        }
    }
}

