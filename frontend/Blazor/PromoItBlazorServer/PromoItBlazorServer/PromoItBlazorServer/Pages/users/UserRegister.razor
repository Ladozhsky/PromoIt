@page "/register"
@attribute [Authorize]
@using System.Net.Http;
@using System.Net.Http.Json;
@using PromoItBlazorServer.Data;
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor

<h2>Finish your registration</h2>

<img src="https://d3mvlb3hz2g78.cloudfront.net/wp-content/uploads/2020/11/thumb_720_450_dreamstime_m_44810592_(1).jpg"/>

<form method="post" @onsubmit="@SubmitForm">
    <div class="form-group">
        <label for="username">Your name</label>
        <input type="text" class="form-control" id="username" @bind="@user.UserName" required />
    </div>
    <div class="form-group">
        <label for="address">Address</label>
        <input type="address" class="form-control" id="address" @bind="@user.Address" required />
    </div>
    <div class="form-group">
        <label for="telnumber">Phone number</label>
        <input type="telnumber" class="form-control" id="telnumber" @bind="@user.TelNumber" required />
    </div>
    <div class="form-group">
        <label for="Company">Company</label>
        <input type="Company" class="form-control" id="Company" @bind="@user.CompanyId" required />
    </div>

    @*<select class="form-select form-select-lg mb-3" @bind="@">
    @foreach (var company in companies)
        {
            if (role.RoleId == 1) continue;
            <option value="@role.RoleId">@role.RoleName</option>
        }
    </select>

    <div>
    <input type="radio" id="showCompanyForm" @bind="showForm" @onchange="ToggleFormVisibility" />
        <label for="showCompanyForm">Create new company</label>
    </div>

    <form id="hiddenForm" style="display: none;">
    <div class="form-group">
        <label for="companyname">Company name</label>
        <input type="text" class="form-control" id="companyname" @bind="@campaign.CampaignName" required />
    </div>
    <div class="form-group">
        <label for="site">Website</label>
    <input type="text" class="form-control" id="site" @bind="@campaign.CampaignName" required />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
    <input type="text" class="form-control" id="email" @bind="@campaign.CampaignName" required />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
    <input type="text" class="form-control" id="email" @bind="@campaign.CampaignName" required />
    </div>

    <select class="form-select form-select-lg mb-3" @bind="@">
         <option value="Business organisation">Business organisation</option>
         <option value="Non-profit organisation">Non-profit organisation</option>
    </select>
    <button type="submit" class="btn btn-primary">Create company</button>
    </form>*@
    <button type="submit" class="btn btn-primary">End register</button>
    </form>

    @if (ErrorMessage != null)
    {
          <div class="alert alert-danger">@ErrorMessage</div>
    }

@code {
    private string ErrorMessage { get; set; }

    Register user = new Register();

    private async Task SubmitForm()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            HttpClient client = new HttpClient();

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response = await client.PostAsJsonAsync("https://localhost:7096/api/Users", user);
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();

                NavigationManager.NavigateTo("/campaigns");
            }
            else
            {
                object error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
                await JSRuntime.InvokeAsync<object>("alert", error);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
