@page "/register"
@attribute [Authorize]
@using System.Net.Http;
@using System.Net.Http.Json;
@using PromoItBlazorServer.Data;
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor

<h1>Finish your registration</h1>

<img src="https://d3mvlb3hz2g78.cloudfront.net/wp-content/uploads/2020/11/thumb_720_450_dreamstime_m_44810592_(1).jpg"/>

<h3>Choose your company</h3>
<div>
    <select id="company" class="form-select form-select-lg mb-3" @bind="@user.CompanyId">
    @foreach (var company in companies)
        {
            <option value="@company.CompanyId">@company.CompanyName</option>
        }
    </select>
</div>
<div>
    <button type="button" class="btn btn-primary" @onclick="NavigateToAddCompany">Create New Company</button>
</div>

<form method="post" @onsubmit="@SubmitUserForm">
    <div class="form-group">
        <label for="username">Your name</label>
        <input type="text" class="form-control" id="username" @bind="@user.UserName" required />
    </div>
    <div class="form-group">
        <label for="address">Address</label>
        <input type="address" class="form-control" id="address" @bind="@user.Address" required />
    </div>
    <div class="form-group">
        <label for="telnumber">Phone number</label>
        <input type="telnumber" class="form-control" id="telnumber" @bind="@user.TelNumber" required />
    </div>
    
    <button type="submit" class="btn btn-primary">End register</button>
    </form>

    @if (ErrorMessage != null)
    {
          <div class="alert alert-danger">@ErrorMessage</div>
    }

@code {
    private List<string> companyTypes = new List<string> { "Business", "NPO" };

    private string ErrorMessage { get; set; }

    private bool showForm = false;

    private void ToggleFormVisibility()
    {
        showForm = !showForm;
    }

    public void NavigateToAddCompany()
    {
        NavigationManager.NavigateTo("/add-company");
    }

    Register user = new Register();

    CompanyDto company = new CompanyDto();

    private List<CompanyDto> companies = new List<CompanyDto>();

    HttpClient client = new HttpClient();


    private async Task SubmitUserForm()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response = await client.PostAsJsonAsync("https://localhost:7096/api/Users", user);
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();

                NavigationManager.NavigateTo("/campaigns");
            }
            else
            {
                object error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
                await JSRuntime.InvokeAsync<object>("alert", error);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        companies = await client.GetFromJsonAsync<List<CompanyDto>>("https://localhost:7096/api/Companies");
    }
}
