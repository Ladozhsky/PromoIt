@page "/current-donations"
@using PromoItBlazorServer.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Net.Http.Headers;
@using System.IdentityModel.Tokens.Jwt;
@using Tweetinvi;
@using Tweetinvi.Models;
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<PageTitle>Current donations</PageTitle>

<div style="margin-left:50px">
<h1>Current donations</h1>
<AuthorizeView Policy="Social Activist">
<h2>You can share about campaign in Twitter and buy a products for charity</h2>
</AuthorizeView>
</div>
<div class="don-card">
    @foreach (var donation in donations.AsEnumerable().Reverse())
    {
        <div class="card text-center">
        <div class="to-center">
             <h2 class="h2-inline">Campaign:&nbsp</h2><h2 class="h2-inline-black"> @donation.CampaignName</h2>
        </div>
        <div class="to-center">
                <h2 class="h2-inline">Company:&nbsp</h2><h2 class="h2-inline-black"> @donation.CompanyName</h2>
        </div>
        <div class="to-center">
            <h2 class="h2-inline">Product:&nbsp</h2><h2 class="h2-inline-black"> @donation.ProductName</h2> 
        </div>
        <div class="to-center">
            <h2 class="h2-inline">Price:&nbsp</h2><h2 class="h2-inline-black"> @donation.Price</h2>
        </div>
        <div class="to-center">
            <h2 class="h2-inline">Amount:&nbsp</h2><h2 class="h2-inline-black"> @donation.Amount</h2>
        </div>
        <div class="to-center">
            <h1 class="h2-inline">Hashtag:&nbsp</h1><h1 class="h2-inline-black"> @donation.Hashtag</h1>
        </div>

            <AuthorizeView Policy="Social Activist">
                <a href="https://twitter.com/?lang=ru" target="_blank"><button class="btn-tweet">Tweet</button></a>
                <div style="align-item: center">
                <button class="btn-id" @onclick="() => Increment(donation)"><i class="fa fa-plus"></i></button>
                </div>
                        <h1>@donation.Quantity</h1>
                <div style="align-item: center align-text: center">
                    <button class="btn-id" @onclick="() => Decrement(donation)"><i class="fa fa-minus"></i></button>
                </div>
                <div style="align-item: center">
                <button class="btn btn-purchase" @onclick="() => Purchase(donation.CampaignId, donation.CompanyId, donation.Price, donation.ProductId, donation.Quantity, donation.OrderId, donation.Amount,
                    donation.CampaignName, donation.CompanyName, donation.ProductName)">Purchase</button>
                </div>
            </AuthorizeView>
        </div>
    }
</div>

@code {
    public List<DonationDto> donations = new List<DonationDto>();
    public DonatedProductDto donatedProduct = new DonatedProductDto();
    public BalanceTransactionDto balance = new BalanceTransactionDto();
    public UpdateQuantity updateQuantity = new UpdateQuantity();
    public UpdateStatus updateStatus = new UpdateStatus();
    public TweetParams tweetParams = new TweetParams();
    private RequestsUrls requestsUrls = new RequestsUrls();

    HttpClient http = new HttpClient();

    public void NavigateToCampaign(int campaignId)
    {
        NavigationManager.NavigateTo($"/campaign/{campaignId}");
    }

    private void Increment(DonationDto donation)
    {
        donation.Quantity = donation.Quantity < donation.Amount ? ++donation.Quantity : donation.Quantity = donation.Amount;
    }

    private void Decrement(DonationDto donation)
    {
        donation.Quantity = donation.Quantity > 1 ? --donation.Quantity : 1;
    }

    private async Task Purchase(int campaignId, int companyId, int price, int productId, int quantity, int orderId, int amount, string campaignName, string companyName, string productName)
    {
        donatedProduct.CampaignId = campaignId;
        donatedProduct.ProductId = productId;
        donatedProduct.Amount = quantity;

        balance.CampaignId = campaignId;
        balance.Amount = price * quantity;

        updateQuantity.Quantity = quantity;

        string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        string userId = jwtToken.Claims.FirstOrDefault(c => c.Type == "user_id").Value;

        string twitterId = userId.Split('|')[1];

        tweetParams.twitter_user_id = twitterId;
        tweetParams.campaign = campaignName;
        tweetParams.company = companyName;
        tweetParams.product = productName;

        CompleteTransaction completeTransaction = new CompleteTransaction
            {
                CampaignId = campaignId,
                CompanyId = companyId,
                ProductId = productId,
                Amount = quantity
            };


        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        bool availableTransaction = await http.GetFromJsonAsync<bool>($"{requestsUrls.Purchase}/{campaignId}/{productId}/{quantity}");
        bool existingDonatedProduct = await http.GetFromJsonAsync<bool>($"{requestsUrls.Products}/{productId}/{campaignId}");

        if (availableTransaction)
        {
            HttpResponseMessage balanceTransaction = await http.PostAsJsonAsync(requestsUrls.Purchase, balance);
            HttpResponseMessage addingProductOrUpdatingAmount = !existingDonatedProduct ? await http.PostAsJsonAsync(requestsUrls.NewDonatedProducts, donatedProduct) :
            await http.PutAsJsonAsync($"{requestsUrls.Products}/{productId}/{campaignId}", updateQuantity);

            HttpResponseMessage updatedAmount = await http.PutAsJsonAsync($"{requestsUrls.Orders}/{orderId}", updateQuantity);
            HttpResponseMessage addingCompletedTransaction = await http.PostAsJsonAsync(requestsUrls.CompletedTransactions, completeTransaction);

            NavigationManager.NavigateTo("/thanks");

            if (quantity == amount)
            {
                HttpResponseMessage updatingDonationStatus = await http.PutAsJsonAsync($"{requestsUrls.Purchase}/{orderId}", updateStatus);
            }
            HttpResponseMessage postingTweet = await http.PostAsJsonAsync(requestsUrls.Twitter, tweetParams);
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("alert", "You don't have enough money to buy this product");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        donations = await http.GetFromJsonAsync<List<DonationDto>>(requestsUrls.Orders);
    }
}

