@page "/current-donations"
@attribute [Authorize]
@using PromoItBlazorServer.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime


<PageTitle>Current donations</PageTitle>

<h1>Current donations</h1>
<AuthorizeView>
<h2>You can share about campaign in Twitter and buy a products for charity</h2>
</AuthorizeView>
<div class="card-deck">
    @foreach (var donation in donations)
    {
        <div class="card text-center">
        <h2>Campaign: @donation.CampaignName</h2>
        <h2>Company: @donation.CompanyName</h2>
        <h3>Product: @donation.ProductName</h3> 
        <h3>Price: @donation.Price</h3>
        <h3>Amount @donation.Amount</h3>
        <h1>Hashtah @donation.Hashtag</h1>
                <a href="https://twitter.com/?lang=ru" target="_blank"><button class="btn-tweet">Tweet</button></a>
                <button class="btn btn-id" @onclick="@Increment">+</button>
                    <input type=number @bind-value="quantity" class="quantity">
                <button class="btn btn-id" @onclick="@Decrement">-</button>
                <button class="btn btn-success" @onclick="() => Purchase(donation.CampaignId, donation.Price, donation.ProductId, donation.Amount)">Purchase</button>
        </div>
    }
</div>

@code {

    public List<DonationDto> donations = new List<DonationDto>();
    public DonatedProductDto donatedProduct = new DonatedProductDto();
    public BalanceTransactionDto balance = new BalanceTransactionDto();
    private int quantity = 1;

    HttpClient http = new HttpClient();

    public void NavigateToCampaign(int campaignId)
    {
        NavigationManager.NavigateTo($"/campaign/{campaignId}");
    }

    private void Increment()
    {
        quantity++;
    }

    private void Decrement()
    {
        if (quantity >= 2)
            quantity--;
        else quantity = 1;
    }

    private async Task Purchase(int campaignId, int price, int productId, int amount)
    {
        int selectedCampaignId = campaignId;
        donatedProduct.CampaignId = campaignId;
        donatedProduct.ProductId = productId;
        donatedProduct.Amount = amount;

        balance.CampaignId = campaignId;
        balance.Amount = price;

        string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        int dollarsAmount = await http.GetFromJsonAsync<int>($"https://localhost:7096/api/Purchase/{selectedCampaignId}");

        if (dollarsAmount >= price)
        {
            HttpResponseMessage response = await http.PostAsJsonAsync("https://localhost:7096/api/Purchase", balance);
            HttpResponseMessage responseNext = await http.PostAsJsonAsync("https://localhost:7096/api/Purchase/api/Add-donated-product", donatedProduct);
            NavigationManager.NavigateTo("/thanks");
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("alert", "You don't have enough money to buy this product");
        }

    }

    protected override async Task OnInitializedAsync()
    {
        string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        donations = await http.GetFromJsonAsync<List<DonationDto>>("https://localhost:7096/api/Orders");
    }
}

