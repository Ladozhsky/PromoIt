@page "/add-donation/{id:int}"
@attribute [Authorize]
@using System.Net.Http;
@using System.Net.Http.Json;
@using PromoItBlazorServer.Data;
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<Donation> Logger

<head>
    <title>Donation</title>
    <link href="~/css/mycss.css" rel="stylesheet" />
</head>
<div style="margin-left:50px">
<h1>Make your donation</h1>
<img class="promo-img" src="https://cdnn21.img.ria.ru/images/96378/63/963786378_0:105:2000:1230_600x0_80_0_0_bd991d21f2e979514ae76e42410fd11c.jpg.webp" width="700px"/>
</div>
<br />
<div class="card text-center donation-card">

<h3>Campaign: @campaign.CampaignName</h3>

<form method="post" @onsubmit="@SubmitForm">
    <div>
    <label for="product">Choose product you want to donate</label>
    <select id="product" class="form-select form-select-lg mb-3" @bind="@order.ProductId">
    <option value="" selected disabled></option>
    @foreach (var product in products)
            {
                <option value="@product.ProductId">@product.ProductName</option>
            }
    </select>
    </div>
    <div class="form-group">
        <label for="amount">Amount</label>
        <input type="text" placeholder="Enter here" class="form-control" id="amount" @bind="@order.Amount" required />
    </div>

    <button type="submit" class="btn btn-success">Donate</button>
</form>
</div>
@if (ErrorMessage != null)
{
         <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string ErrorMessage { get; set; }

    [Parameter]
    public int? id { get; set; }

    HttpClient http = new HttpClient();

    private CampaignDto campaign = new CampaignDto();
    private List<ProductDto> products = new List<ProductDto>();
    public OrderDto order = new OrderDto();
    private RequestsUrls requestsUrls = new RequestsUrls();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            Logger.LogInformation("Getting campaigns...");
            campaign = await http.GetFromJsonAsync<CampaignDto>($"{requestsUrls.Campaigns}/{id}");
            Logger.LogInformation("Getting products...");
            products = await http.GetFromJsonAsync<List<ProductDto>>(requestsUrls.ProductsByCompany);
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
            Logger.LogError(ErrorMessage);
        }
    }

    private async Task SubmitForm()
    {
        try
        {
            string token = HttpContextAccessor.HttpContext.Request.Cookies["auth_token"];

            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            order.CampaignId = campaign.CampaignId;

            HttpResponseMessage response = await http.PostAsJsonAsync(requestsUrls.Orders, order);
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();

                NavigationManager.NavigateTo("/current-donations");
            }
            else
            {
                object error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
                await JSRuntime.InvokeAsync<object>("alert", error);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
            Logger.LogError(ErrorMessage);
        }
    }
}

