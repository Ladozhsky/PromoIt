@page "/register"
@using System.Net.Http;
@using System.Net.Http.Json;
@using PromoItFront.Data;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Register</h1>

<h3>Choose your role</h3>

<select class="form-select form-select-lg mb-3" @bind="@selectedRole">
    @foreach (var role in roles) 
    {
        if (role.RoleId == 1) continue;
        <option value="@role.RoleId">@role.RoleName</option>
    }
</select>

<form method="post" @onsubmit="@SubmitForm">
    <div class="form-group">
        <label for="username">Username</label>
        <input type="text" class="form-control" id="username" @bind="@user.UserName" required />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" id="email" @bind="@user.Email" required />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" @bind="@user.Password" required />
    </div>
    <div class="form-group">
        <label for="address">Address</label>
        <input type="address" class="form-control" id="address" @bind="@user.Address" />
    </div>
    <div class="form-group">
        <label for="telnumber">TelNumber</label>
        <input type="telnumber" class="form-control" id="telnumber" @bind="@user.TelNumber" required />
    </div>
    <div class="form-group">
        <label for="roleid">RoleId</label>
        <input type="roleid" class="form-control" id="roleid" @bind="@user.RoleId" required />
    </div>
    <div class="form-group">
        <label for="companyid">CompanyId</label>
        <input type="companyid" class="form-control" id="companyid" @bind="@user.CompanyId" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>

@if (ErrorMessage != null)
{
        <div class="alert alert-danger">@ErrorMessage</div>
}

@code {

    private string ErrorMessage { get; set; }

    RegisterUser user = new RegisterUser();

    private async Task SubmitForm()
    {
        try
        {

            HttpClient client = new HttpClient();

            HttpResponseMessage response = await client.PostAsJsonAsync($"http://localhost:15039/api/Register?username={user.UserName}", user);
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();

                NavigationManager.NavigateTo("/");
            }
            else
            {
                object error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
                await JSRuntime.InvokeAsync<object>("alert", error);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    int selectedRole;

    private List<Role> roles = new List<Role>();

    protected override async Task OnInitializedAsync()
    {
        HttpClient http = new HttpClient();

        roles = await http.GetFromJsonAsync<List<Role>>("http://localhost:15039/api/Roles");
    }
}

